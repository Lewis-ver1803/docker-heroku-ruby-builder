version: 2.1

workflows:
  version: 2.1
  heroku-20:
    jobs:
      - build-docker-image:
          stack: "heroku-20"
      - build-binary:
          stack: "heroku-20"
          requires:
            - build-docker-image
      # Tests are expected to fail since heroku-20 is marked as internal-only in API for now,
      # so requires a privileged API call to create apps with that stack.
      # - test:
      #     stack: "heroku-20"
      #     requires:
      #       - build-binary
      - upload-to-s3:
          stack: "heroku-20"
          bucket_name: $STAGING_BUCKET_NAME
          aws_access_key_id: $STAGING_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $STAGING_AWS_SECRET_ACCESS_KEY
          name: Upload to S3 Staging
          requires:
            # - test
            - build-binary
      - production-hold:
          type: approval
          requires:
            # - test
            - build-binary
      - upload-to-s3:
          stack: "heroku-20"
          bucket_name: $PRODUCTION_BUCKET_NAME
          aws_access_key_id: $PRODUCTION_AWS_ACCESS_KEY_ID
          aws_secret_access_key: $PRODUCTION_AWS_SECRET_ACCESS_KEY
          name: Upload to S3 Production
          requires:
            - production-hold

jobs:
  build-docker-image:
    machine:
      docker_layer_caching: true
    parameters:
      stack:
        type: string
    steps:
      - checkout
      - run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      - run: make docker-image STACK=<< parameters.stack >>
      - run: make docker-push STACK=<< parameters.stack >>

  build-binary:
    parameters:
      stack:
        type: string
    docker:
      - image: hone/ruby-builder:<< parameters.stack >>
    steps:
      - checkout
      - run: ruby -v > /tmp/ruby_version
      - restore_cache:
          keys:
            - gem-cache-v1-{{ arch }}-{{ checksum "/tmp/ruby_version" }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v1-{{ arch }}-{{ checksum "/tmp/ruby_version" }}-{{ .Branch }}
      - run:
          name: Setup in Docker Makefile
          command: cp dockerfiles/support/Makefile.docker Makefile
      - run:
          name: Build Ruby
          command: OUTPUT_DIR=`pwd`/builds/ make build STACK=<< parameters.stack >> RUBY_VERSION=$RUBY_VERSION
      - run:
          command: bundle clean
      - save_cache:
          key: gem-cache-v1-{{ arch }}-{{ checksum "/tmp/ruby_version" }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - store_artifacts:
          path: builds
      - run:
          name: Setup Circle CI Workspace
          command: |
            mkdir -p store/
            echo $CIRCLE_BUILD_NUM > store/circle_build_num
            cp -rf builds/ store/
      - persist_to_workspace:
          root: store
          paths:
            - circle_build_num
            - builds

  upload-to-s3:
    docker:
      - image: circleci/python:2.7-stretch
    parameters:
      bucket_name:
        type: string
      aws_access_key_id:
        type: string
      aws_secret_access_key:
        type: string
      stack:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/store
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Setup AWS Credentials
          command: |
            mkdir -p ~/.aws/
            printf "[<< parameters.bucket_name >>]\naws_access_key_id = << parameters.aws_access_key_id >>\naws_secret_access_key = << parameters.aws_secret_access_key >>" > ~/.aws/credentials
      - run:
          name: Upload Binary to S3
          command: |
            aws s3 cp \
              /tmp/store/builds/<< parameters.stack >>/ruby-$RUBY_VERSION.tgz \
              s3://<< parameters.bucket_name >>/<< parameters.stack >>/ruby-$RUBY_VERSION.tgz \
              --profile << parameters.bucket_name >> \
              --acl public-read
